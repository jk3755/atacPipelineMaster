j <- a+7
k <- a+8
l <- a+9
m <- a+10
n <- a+11
o <- a+12
p <- a+13
q <- a+14
r <- a+15
s <- a+16
t <- a+17
u <- a+18
v <- a+19
tmp1 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[c], ".processFP.bamcopy1.done", "', ")
tmp2 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[d], ".processFP.bamcopy2.done", "', ")
tmp3 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[e], ".processFP.bamcopy3.done", "', ")
tmp4 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[f], ".processFP.bamcopy4.done", "', ")
tmp5 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[g], ".processFP.bamcopy5.done", "', ")
tmp6 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[h], ".processFP.bamcopy6.done", "', ")
tmp7 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[i], ".processFP.bamcopy7.done", "', ")
tmp8 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[j], ".processFP.bamcopy8.done", "', ")
tmp9 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[k], ".processFP.bamcopy9.done", "', ")
tmp10 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[l], ".processFP.bamcopy10.done", "', ")
tmp11 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[m], ".processFP.bamcopy11.done", "', ")
tmp12 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[n], ".processFP.bamcopy12.done", "', ")
tmp13 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[o], ".processFP.bamcopy13.done", "', ")
tmp14 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[p], ".processFP.bamcopy14.done", "', ")
tmp15 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[q], ".processFP.bamcopy15.done", "', ")
tmp16 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[r], ".processFP.bamcopy16.done", "', ")
tmp17 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[s], ".processFP.bamcopy17.done", "', ")
tmp18 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[t], ".processFP.bamcopy18.done", "', ")
tmp19 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[u], ".processFP.bamcopy19.done", "', ")
tmp20 <- paste0("'{path}footprints/operations/processed/{mergedsample}.", uniqueGenes[v], ".processFP.bamcopy20.done", "'")
strings[b] <- paste0(
"rule processFP_group",
b,
":\n",
"\tinput:\n\t\t",
tmp1, "\n\t\t", tmp2, "\n\t\t", tmp3, "\n\t\t", tmp4, "\n\t\t", tmp5, "\n\t\t",
tmp6, "\n\t\t", tmp7, "\n\t\t", tmp8, "\n\t\t", tmp9, "\n\t\t", tmp10, "\n\t\t",
tmp11, "\n\t\t", tmp12, "\n\t\t", tmp13, "\n\t\t", tmp14, "\n\t\t", tmp15, "\n\t\t",
tmp16, "\n\t\t", tmp17, "\n\t\t", tmp18, "\n\t\t", tmp19, "\n\t\t", tmp20, "\n\t",
"output:\n\t\t",
"'{path}footprints/operations/groups/{mergedsample}.processFP.group", b, ".done'\n",
"\tshell:\n\t\t",
"'touch {output}'"
)
a <- a+20
b <- b+1
}
## Write the file
outPath <- "C:\\Users\\jsk33\\Desktop\\test.txt"
write.table(
strings,
file = outPath,
quote = FALSE,
sep = ",",
eol = "\n",
row.names = FALSE,
col.names = FALSE)
load("C:/Users/jsk33/Desktop/H508A-WT-02.USF1.parsedFootprintData.Rdata")
View(footprintData)
View(footprintData)
View(footprintData)
View(footprintData)
load("C:/Users/jsk33/Desktop/H508A-WT-02.TFAP2A.parsedFootprintData.Rdata")
View(footprintData)
View(footprintData)
load("C:/Users/jsk33/Desktop/H508A-WT-02.USF2.parsedFootprintData.Rdata")
View(footprintData)
View(footprintData)
load("C:/Users/jsk33/Desktop/H508A-WT-02.TFAP2A.rawFootprintData.Rdata")
View(footprintData)
View(footprintData)
View(footprintData)
View(footprintData)
load("C:/Users/jsk33/Desktop/H508A-WT-02.TFAP2A.parsedFootprintData.Rdata")
View(footprintData)
View(footprintData)
## Also remove any sublists that do not have the parsed data object stored
footprintData <- list.clean(footprintData, function(footprintData) length(footprintData) == 15L, TRUE)
View(footprintData)
View(footprintData)
load("C:/Users/jsk33/Desktop/H508A-WT-02.TFAP2A.parsedFootprintData.Rdata")
View(footprintData)
View(footprintData)
View(footprintData)
View(footprintData)
## Also remove any sublists that do not have the parsed data object stored
footprintData <- list.clean(footprintData, function(footprintData) length(footprintData) == 15L, TRUE)
View(footprintData)
View(footprintData)
##
numMotifs <- length(footprintData)
tryCatch({
#### MERGE AND DEDUPLICATE ALL BINDING SITES ####
## At this point, the footprints have already been parsed into bound and unbound sites
## Transfer data for both to the new storage object, for downstream analysis
# If there is only one motif available, there is no need to merge and deduplicate the identified sites
if (numMotifs == 1){
##
peakSites <- footprintData[["motif1"]][["peakSites"]]
peakInsertionMatrix <- footprintData[["motif1"]][["insMatrix"]]
rawPeakFootprintMetrics <- footprintData[["motif1"]][["rawFootprintMetrics"]]
numPeakSites <- length(peakSites)
## Split the sites into bound and unbound as determined by null model with bonferroni correction
boundSiteOverlaps <- findOverlaps(footprintData[["motif1"]][["parseData"]][["bfSites"]], footprintData[["motif1"]][["peakSites"]])
boundSiteIndex <- boundSiteOverlaps@to
##
boundSites <- peakSites[boundSiteIndex]
boundSitesInsertionMatrix <- peakInsertionMatrix[boundSiteIndex,]
boundSitesMetrics <- rawPeakFootprintMetrics[boundSiteIndex,]
numBoundSites <- length(boundSites)
##
unboundSites <- peakSites[-boundSiteIndex]
unboundSitesInsertionMatrix <- peakInsertionMatrix[-boundSiteIndex,]
unboundSitesMetrics <- rawPeakFootprintMetrics[-boundSiteIndex,]
numUnboundSites <- length(unboundSites)
## If more than one motif is found for the current TF, merge the data and deduplicate any overlapping genomic sites ##
} else {
## The insertion matrices cannot be concatenated because they have different numbers of columns
## Initialize list objects here to store the insertion matrices separately (not concatenated)
## Pull the data for each individual motif and perform the bound/unbound split
for (z in 1:numMotifs){
tryCatch({
## Pull the basic data
com <- paste0("peakSites", z, " <- footprintData[['motif", z, "']][['peakSites']]")
eval(parse(text = com))
com <- paste0("peakInsertionMatrix", z, " <- footprintData[['motif", z, "']][['insMatrix']]")
eval(parse(text = com))
com <- paste0("rawPeakFootprintMetrics", z, " <- footprintData[['motif", z, "']][['rawFootprintMetrics']]")
eval(parse(text = com))
## Perform the bound/unbound split
com <- paste0("boundSiteOverlaps", z, " <- findOverlaps(footprintData[['motif", z, "']][['parseData']][['bfSites']], footprintData[['motif", z, "']][['peakSites']])")
eval(parse(text = com))
com <- paste0("boundSiteIndex", z, " <- boundSiteOverlaps", z, "@to")
eval(parse(text = com))
## Bound sites
com <- paste0("boundSites", z, " <- peakSites", z, "[boundSiteIndex", z, ",]")
eval(parse(text = com))
com <- paste0("boundSitesInsertionMatrix", z, " <- peakInsertionMatrix", z, "[boundSiteIndex", z, ",]")
eval(parse(text = com))
com <- paste0("boundSitesMetrics", z, " <- rawPeakFootprintMetrics", z, "[boundSiteIndex", z, ",]")
eval(parse(text = com))
com <- paste0("numBoundSites", z, " <- length(boundSites", z, ")")
eval(parse(text = com))
## Unbound sites
com <- paste0("unboundSites", z, " <- peakSites", z, "[-boundSiteIndex", z, ",]")
eval(parse(text = com))
com <- paste0("unboundSitesInsertionMatrix", z, " <- peakInsertionMatrix", z, "[-boundSiteIndex", z, ",]")
eval(parse(text = com))
com <- paste0("unboundSitesMetrics", z, " <- rawPeakFootprintMetrics", z, "[-boundSiteIndex", z, ",]")
eval(parse(text = com))
com <- paste0("numUnboundSites", z, " <- length(unboundSites", z, ")")
eval(parse(text = com))
}, # end try
error=function(cond){
message(cond)
return(NA)},
finally={})
} # end for (z in 1:numMotif)
#### Perform the merging and deduplication ####
for (b in 2:numMotifs){
tryCatch({
## Find overlaps and generate selection indices
com <- paste0("tempOverlapsPeaks <- findOverlaps(peakSites1, peakSites", b,")")
eval(parse(text = com))
##
com <- paste0("tempOverlapsBound <- findOverlaps(boundSites1, boundSites", b,")")
eval(parse(text = com))
##
com <- paste0("tempOverlapsUnbound <- findOverlaps(unboundSites1, unboundSites", b,")")
eval(parse(text = com))
#### MERGE THE PEAK SITES (all sites) ####
## If no overlaps are present, can just directly merge the two Granges
if (length(tempOverlapsPeaks@from) == 0){
com <- paste0("peakSites1 <- c(peakSites1, peakSites", b, ")")
eval(parse(text = com))
com <- paste0("rawPeakFootprintMetrics1 <- rbind(rawPeakFootprintMetrics1, rawPeakFootprintMetrics", b, ")")
eval(parse(text = com))
## Otherwise, if some overlaps are present, merge the Granges, but omit overlapping sites from second group
} else {
mergeIdx <- tempOverlapsPeaks@to
##
com <- paste0("peakSites1 <- c(peakSites1, peakSites", b, "[-mergeIdx])")
eval(parse(text = com))
com <- paste0("rawPeakFootprintMetrics1 <- rbind(rawPeakFootprintMetrics1, rawPeakFootprintMetrics", b, "[-mergeIdx,])")
eval(parse(text = com))
} # end if (length(overlaps@from) == 0)
#### MERGE THE BOUND SITES ####
if (length(tempOverlapsBound@from) == 0){
com <- paste0("boundSites1 <- c(boundSites1, boundSites", b, ")")
eval(parse(text = com))
com <- paste0("boundSitesMetrics1 <- rbind(boundSitesMetrics1, boundSitesMetrics", b, ")")
eval(parse(text = com))
} else {
mergeIdx <- tempOverlapsBound@to
##
com <- paste0("boundSites1 <- c(boundSites1, boundSites", b, "[-mergeIdx])")
eval(parse(text = com))
com <- paste0("boundSitesMetrics1 <- rbind(boundSitesMetrics1, boundSitesMetrics", b, "[-mergeIdx,])")
eval(parse(text = com))
} # end if (length(tempOverlapsBound@from) == 0)
#### MERGE THE UNBOUND SITES ####
if (length(tempOverlapsUnbound@from) == 0){
com <- paste0("unboundSites1 <- c(unboundSites1, unboundSites", b, ")")
eval(parse(text = com))
com <- paste0("unboundSitesMetrics1 <- rbind(unboundSitesMetrics1, unboundSitesMetrics", b, ")")
eval(parse(text = com))
} else {
mergeIdx <- tempOverlapsUnbound@to
##
com <- paste0("unboundSites1 <- c(unboundSites1, unboundSites", b, "[-mergeIdx])")
eval(parse(text = com))
com <- paste0("unboundSitesMetrics1 <- rbind(unboundSitesMetrics1, unboundSitesMetrics", b, "[-mergeIdx,])")
eval(parse(text = com))
} # end if (length(tempOverlapsUnbound@from) == 0)
}, # end try
error=function(cond){
message(cond)
return(NA)},
finally={})
} # end for (b in 2:numMotifs)
## Because the code is written to use the first motif to merge everything into,
## transfer the data at this stage to make it consistent with numMotifs == 1
peakSites <- peakSites1
rawPeakFootprintMetrics <- rawPeakFootprintMetrics1
numPeakSites <- length(peakSites)
##
boundSites <- boundSites1
boundSitesMetrics <- boundSitesMetrics1
numBoundSites <- length(boundSites)
##
unboundSites <- unboundSites1
unboundSitesMetrics <- unboundSitesMetrics1
numUnboundSites <- length(unboundSites)
} # end if (numMotifs == 1)
#### Calculate footprint characteristics on merged data ####
tryCatch({
## Calculate the 10% trimmed mean of all insertions in the motif sites
peakMotifSignal <- mean(rawPeakFootprintMetrics[,3], trim = 0.10)
boundMotifSignal <- mean(boundSitesMetrics1[,3], trim = 0.10)
unboundMotifSignal <- mean(unboundSitesMetrics1[,3], trim = 0.10)
## Calculate the mean of all insertions in the flank region
peakFlankSignal <- mean(rawPeakFootprintMetrics[,2], trim = 0.10)
boundFlankSignal <- mean(boundSitesMetrics1[,2], trim = 0.10)
unboundFlankSignal <- mean(unboundSitesMetrics1[,2], trim = 0.10)
## Calculate the mean of background insertions
peakBackgroundSignal <- mean(rawPeakFootprintMetrics[,1], trim = 0.10)
boundBackgroundSignal <- mean(boundSitesMetrics1[,1], trim = 0.10)
unboundBackgroundSignal <- mean(unboundSitesMetrics1[,1], trim = 0.10)
## Calculate flanking accessibility (log2 fold change between flank and background)
peak.log2Flank <- log2(peakFlankSignal / peakBackgroundSignal)
bound.log2Flank <- log2(boundFlankSignal / boundBackgroundSignal)
unbound.log2Flank <- log2(unboundFlankSignal / unboundBackgroundSignal)
## Calculate footprint depth (log2 fold change between flank and background)
peak.log2Depth <- log2(peakMotifSignal / peakFlankSignal)
bound.log2Depth <- log2(boundMotifSignal / boundFlankSignal)
unbound.log2Depth <- log2(unboundMotifSignal / unboundFlankSignal)
}, # end try
error=function(cond){
message(cond)
return(NA)
},
finally={})
}, # end try
error=function(cond){
message(cond)
return(NA)},
finally={})
View(footprintData)
View(footprintData)
names(footprintData)
## Because some motifs may be removed due to errors, pull the motif names to be used in downstream commands (can't just go sequentially)
motifNames <- names(footprintData)
com <- paste0("footprintData[['", motifNames[1], "'[['peakSites']]")
##
com <- paste0("footprintData[['", motifNames[1], "']][['peakSites']]")
## Split the sites into bound and unbound as determined by null model with bonferroni correction
com <- paste0("boundSiteOverlaps <- findOverlaps(footprintData[['", motifNames[1], "']][['parseData']][['bfSites']], footprintData[['", motifNames[1], "]][['peakSites']]")
com
load("C:/Users/jsk33/Desktop/H508A-WT-02.TFAP2A.parsedFootprintData.Rdata")
## To avoid errors, clear the list of any empty sub-lists first
footprintData <- list.clean(footprintData, function(footprintData) length(footprintData) == 0L, TRUE)
## Also remove any sublists that do not have the parsed data object stored
footprintData <- list.clean(footprintData, function(footprintData) length(footprintData) == 15L, TRUE)
##
numMotifs <- length(footprintData)
## Because some motifs may be removed due to errors, pull the motif names to be used in downstream commands (can't just go sequentially)
motifNames <- names(footprintData)
tryCatch({
#### MERGE AND DEDUPLICATE ALL BINDING SITES ####
## At this point, the footprints have already been parsed into bound and unbound sites
## Transfer data for both to the new storage object, for downstream analysis
# If there is only one motif available, there is no need to merge and deduplicate the identified sites
if (numMotifs == 1){
##
com <- paste0("footprintData[['", motifNames[1], "']][['peakSites']]")
eval(parse(text = com))
##
com <- paste0("footprintData[['", motifNames[1], "']][['insMatrix']]")
eval(parse(text = com))
##
com <- paste0("footprintData[['", motifNames[1], "']][['rawFootprintMetrics']]")
eval(parse(text = com))
##
numPeakSites <- length(peakSites)
## Split the sites into bound and unbound as determined by null model with bonferroni correction
com <- paste0("boundSiteOverlaps <- findOverlaps(footprintData[['", motifNames[1], "']][['parseData']][['bfSites']], footprintData[['", motifNames[1], "]][['peakSites']])")
eval(parse(text = com))
##
boundSiteIndex <- boundSiteOverlaps@to
##
boundSites <- peakSites[boundSiteIndex]
boundSitesInsertionMatrix <- peakInsertionMatrix[boundSiteIndex,]
boundSitesMetrics <- rawPeakFootprintMetrics[boundSiteIndex,]
numBoundSites <- length(boundSites)
##
unboundSites <- peakSites[-boundSiteIndex]
unboundSitesInsertionMatrix <- peakInsertionMatrix[-boundSiteIndex,]
unboundSitesMetrics <- rawPeakFootprintMetrics[-boundSiteIndex,]
numUnboundSites <- length(unboundSites)
## If more than one motif is found for the current TF, merge the data and deduplicate any overlapping genomic sites ##
} else {
## The insertion matrices cannot be concatenated because they have different numbers of columns
## Initialize list objects here to store the insertion matrices separately (not concatenated)
## Pull the data for each individual motif and perform the bound/unbound split
for (z in 1:numMotifs){
tryCatch({
## Pull the basic data
com <- paste0("peakSites", z, " <- footprintData[['", motifNames[z], "']][['peakSites']]")
eval(parse(text = com))
com <- paste0("peakInsertionMatrix", z, " <- footprintData[['", motifNames[z], "']][['insMatrix']]")
eval(parse(text = com))
com <- paste0("rawPeakFootprintMetrics", z, " <- footprintData[['", motifNames[z], "']][['rawFootprintMetrics']]")
eval(parse(text = com))
## Perform the bound/unbound split
com <- paste0("boundSiteOverlaps", z, " <- findOverlaps(footprintData[['", motifNames[z], "']][['parseData']][['bfSites']], footprintData[['", motifNames[z], "']][['peakSites']])")
eval(parse(text = com))
com <- paste0("boundSiteIndex", z, " <- boundSiteOverlaps", z, "@to")
eval(parse(text = com))
## Bound sites
com <- paste0("boundSites", z, " <- peakSites", z, "[boundSiteIndex", z, ",]")
eval(parse(text = com))
com <- paste0("boundSitesInsertionMatrix", z, " <- peakInsertionMatrix", z, "[boundSiteIndex", z, ",]")
eval(parse(text = com))
com <- paste0("boundSitesMetrics", z, " <- rawPeakFootprintMetrics", z, "[boundSiteIndex", z, ",]")
eval(parse(text = com))
com <- paste0("numBoundSites", z, " <- length(boundSites", z, ")")
eval(parse(text = com))
## Unbound sites
com <- paste0("unboundSites", z, " <- peakSites", z, "[-boundSiteIndex", z, ",]")
eval(parse(text = com))
com <- paste0("unboundSitesInsertionMatrix", z, " <- peakInsertionMatrix", z, "[-boundSiteIndex", z, ",]")
eval(parse(text = com))
com <- paste0("unboundSitesMetrics", z, " <- rawPeakFootprintMetrics", z, "[-boundSiteIndex", z, ",]")
eval(parse(text = com))
com <- paste0("numUnboundSites", z, " <- length(unboundSites", z, ")")
eval(parse(text = com))
}, # end try
error=function(cond){
message(cond)
return(NA)},
finally={})
} # end for (z in 1:numMotif)
#### Perform the merging and deduplication ####
for (b in 2:numMotifs){
tryCatch({
## Find overlaps and generate selection indices
com <- paste0("tempOverlapsPeaks <- findOverlaps(peakSites1, peakSites", b,")")
eval(parse(text = com))
##
com <- paste0("tempOverlapsBound <- findOverlaps(boundSites1, boundSites", b,")")
eval(parse(text = com))
##
com <- paste0("tempOverlapsUnbound <- findOverlaps(unboundSites1, unboundSites", b,")")
eval(parse(text = com))
#### MERGE THE PEAK SITES (all sites) ####
## If no overlaps are present, can just directly merge the two Granges
if (length(tempOverlapsPeaks@from) == 0){
com <- paste0("peakSites1 <- c(peakSites1, peakSites", b, ")")
eval(parse(text = com))
com <- paste0("rawPeakFootprintMetrics1 <- rbind(rawPeakFootprintMetrics1, rawPeakFootprintMetrics", b, ")")
eval(parse(text = com))
## Otherwise, if some overlaps are present, merge the Granges, but omit overlapping sites from second group
} else {
mergeIdx <- tempOverlapsPeaks@to
##
com <- paste0("peakSites1 <- c(peakSites1, peakSites", b, "[-mergeIdx])")
eval(parse(text = com))
com <- paste0("rawPeakFootprintMetrics1 <- rbind(rawPeakFootprintMetrics1, rawPeakFootprintMetrics", b, "[-mergeIdx,])")
eval(parse(text = com))
} # end if (length(overlaps@from) == 0)
#### MERGE THE BOUND SITES ####
if (length(tempOverlapsBound@from) == 0){
com <- paste0("boundSites1 <- c(boundSites1, boundSites", b, ")")
eval(parse(text = com))
com <- paste0("boundSitesMetrics1 <- rbind(boundSitesMetrics1, boundSitesMetrics", b, ")")
eval(parse(text = com))
} else {
mergeIdx <- tempOverlapsBound@to
##
com <- paste0("boundSites1 <- c(boundSites1, boundSites", b, "[-mergeIdx])")
eval(parse(text = com))
com <- paste0("boundSitesMetrics1 <- rbind(boundSitesMetrics1, boundSitesMetrics", b, "[-mergeIdx,])")
eval(parse(text = com))
} # end if (length(tempOverlapsBound@from) == 0)
#### MERGE THE UNBOUND SITES ####
if (length(tempOverlapsUnbound@from) == 0){
com <- paste0("unboundSites1 <- c(unboundSites1, unboundSites", b, ")")
eval(parse(text = com))
com <- paste0("unboundSitesMetrics1 <- rbind(unboundSitesMetrics1, unboundSitesMetrics", b, ")")
eval(parse(text = com))
} else {
mergeIdx <- tempOverlapsUnbound@to
##
com <- paste0("unboundSites1 <- c(unboundSites1, unboundSites", b, "[-mergeIdx])")
eval(parse(text = com))
com <- paste0("unboundSitesMetrics1 <- rbind(unboundSitesMetrics1, unboundSitesMetrics", b, "[-mergeIdx,])")
eval(parse(text = com))
} # end if (length(tempOverlapsUnbound@from) == 0)
}, # end try
error=function(cond){
message(cond)
return(NA)},
finally={})
} # end for (b in 2:numMotifs)
## Because the code is written to use the first motif to merge everything into,
## transfer the data at this stage to make it consistent with numMotifs == 1
peakSites <- peakSites1
rawPeakFootprintMetrics <- rawPeakFootprintMetrics1
numPeakSites <- length(peakSites)
##
boundSites <- boundSites1
boundSitesMetrics <- boundSitesMetrics1
numBoundSites <- length(boundSites)
##
unboundSites <- unboundSites1
unboundSitesMetrics <- unboundSitesMetrics1
numUnboundSites <- length(unboundSites)
} # end if (numMotifs == 1)
#### Calculate footprint characteristics on merged data ####
tryCatch({
## Calculate the 10% trimmed mean of all insertions in the motif sites
peakMotifSignal <- mean(rawPeakFootprintMetrics[,3], trim = 0.10)
boundMotifSignal <- mean(boundSitesMetrics1[,3], trim = 0.10)
unboundMotifSignal <- mean(unboundSitesMetrics1[,3], trim = 0.10)
## Calculate the mean of all insertions in the flank region
peakFlankSignal <- mean(rawPeakFootprintMetrics[,2], trim = 0.10)
boundFlankSignal <- mean(boundSitesMetrics1[,2], trim = 0.10)
unboundFlankSignal <- mean(unboundSitesMetrics1[,2], trim = 0.10)
## Calculate the mean of background insertions
peakBackgroundSignal <- mean(rawPeakFootprintMetrics[,1], trim = 0.10)
boundBackgroundSignal <- mean(boundSitesMetrics1[,1], trim = 0.10)
unboundBackgroundSignal <- mean(unboundSitesMetrics1[,1], trim = 0.10)
## Calculate flanking accessibility (log2 fold change between flank and background)
peak.log2Flank <- log2(peakFlankSignal / peakBackgroundSignal)
bound.log2Flank <- log2(boundFlankSignal / boundBackgroundSignal)
unbound.log2Flank <- log2(unboundFlankSignal / unboundBackgroundSignal)
## Calculate footprint depth (log2 fold change between flank and background)
peak.log2Depth <- log2(peakMotifSignal / peakFlankSignal)
bound.log2Depth <- log2(boundMotifSignal / boundFlankSignal)
unbound.log2Depth <- log2(unboundMotifSignal / unboundFlankSignal)
}, # end try
error=function(cond){
message(cond)
return(NA)
},
finally={})
#### TRANSFER DATA TO STORAGE OBJECT ####
## Initialize a new list object to store the processed data
processedFootprintData <- list()
##
processedFootprintData$"geneName" <- footprintData[["motif1"]][["geneName"]]
processedFootprintData$"numMotifs" <- numMotifs
processedFootprintData$"numPeakSites" <- numPeakSites
processedFootprintData$"numBoundSites" <- numBoundSites
processedFootprintData$"numUnboundSites" <- numUnboundSites
##
processedFootprintData$"peakSites" <- peakSites
processedFootprintData$"rawPeakFootprintMetrics" <- rawPeakFootprintMetrics
processedFootprintData$"peakMotifSignal" <- peakMotifSignal
processedFootprintData$"peakFlankSignal" <- peakFlankSignal
processedFootprintData$"peakBackgroundSignal" <- peakBackgroundSignal
processedFootprintData$"peak.log2Flank" <- peak.log2Flank
processedFootprintData$"peak.log2Depth" <- peak.log2Depth
##
processedFootprintData$"boundSites" <- boundSites
processedFootprintData$"boundSitesMetrics" <- boundSitesMetrics
processedFootprintData$"boundMotifSignal" <- boundMotifSignal
processedFootprintData$"boundFlankSignal" <- boundFlankSignal
processedFootprintData$"boundBackgroundSignal" <- boundBackgroundSignal
processedFootprintData$"bound.log2Flank" <- bound.log2Flank
processedFootprintData$"bound.log2Depth" <- bound.log2Depth
##
processedFootprintData$"unboundSites" <- unboundSites
processedFootprintData$"unboundSitesMetrics" <- unboundSitesMetrics
processedFootprintData$"unboundMotifSignal" <- unboundMotifSignal
processedFootprintData$"unboundFlankSignal" <- unboundFlankSignal
processedFootprintData$"unboundBackgroundSignal" <- unboundBackgroundSignal
processedFootprintData$"unbound.log2Flank" <- unbound.log2Flank
processedFootprintData$"unbound.log2Depth" <- unbound.log2Depth
}, # end try
error=function(cond){
message(cond)
return(NA)},
finally={})
View(processedFootprintData)
View(processedFootprintData)
load("C:/Users/jsk33/Desktop/H508A-WT-02.EBF1.processedFootprintData.Rdata")
View(processedFootprintData)
View(processedFootprintData)
