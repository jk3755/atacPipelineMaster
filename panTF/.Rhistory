## Subset to unique PWM only ##
cat("Removing duplicate motifs", "\n")
uniqueBindingSites <- list()
uniqueBindingSites[1] <- bindingSites[1]
PWMidx <- 2
##
for (x in 2:numMotif){
addPWM <- "YES"
curNumPWM <- length(uniqueBindingSites)
curBindingSites <- bindingSites[[x]][["sites"]]
##
for (z in 1:curNumPWM){
compBindingSites <- uniqueBindingSites[[z]][["sites"]]
cat(addPWM, "\n")
##
if (identical(curBindingSites, compBindingSites)){
cat("sites are identical", "\n")
addPWM <- "NO"} # end for (z in 1:curNumPWM)}
if (addPWM == "YES"){
uniqueBindingSites[PWMidx] <- bindingSites[x]
PWMidx <- (PWMidx + 1)}
} # end for (x in 2:numMotif)
##
bindingSites <- uniqueBindingSites
}}}}}}}}
## Remove motifs with 0 binding sites
cat("Removing motifs that matched 0 genomic loci", "\n")
numMotif <- length(bindingSites)
numSites <- c()
##
for (l in 1:numMotif){numSites[l] <- length(bindingSites[[l]][["sites"]]@ranges)}
zeroIdx <- which(numSites == 0)
bindingSites <- bindingSites[-zeroIdx]
numMotif <- length(bindingSites)
## Subset to unique PWM only ##
cat("Removing duplicate motifs", "\n")
uniqueBindingSites <- list()
uniqueBindingSites[1] <- bindingSites[1]
PWMidx <- 2
##
for (x in 2:numMotif){
addPWM <- "YES"
curNumPWM <- length(uniqueBindingSites)
curBindingSites <- bindingSites[[x]][["sites"]]
##
for (z in 1:curNumPWM){
compBindingSites <- uniqueBindingSites[[z]][["sites"]]
cat(addPWM, "\n")
##
if (identical(curBindingSites, compBindingSites)){
cat("sites are identical", "\n")
addPWM <- "NO"}} # end for (z in 1:curNumPWM)}
if (addPWM == "YES"){
uniqueBindingSites[PWMidx] <- bindingSites[x]
PWMidx <- (PWMidx + 1)}
} # end for (x in 2:numMotif)
##
bindingSites <- uniqueBindingSites
load("C:/Users/Jordan/Desktop/test/MAFF.bindingSites.Rdata")
## Remove motifs with 0 binding sites
cat("Removing motifs that matched 0 genomic loci", "\n")
numMotif <- length(bindingSites)
numSites <- c()
##
for (l in 1:numMotif){numSites[l] <- length(bindingSites[[l]][["sites"]]@ranges)}
zeroIdx <- which(numSites == 0)
bindingSites <- bindingSites[-zeroIdx]
numMotif <- length(bindingSites)
## Subset to unique PWM only ##
cat("Removing duplicate motifs", "\n")
uniqueBindingSites <- list()
uniqueBindingSites[1] <- bindingSites[1]
PWMidx <- 2
##
for (x in 2:numMotif){
addPWM <- "YES"
curNumPWM <- length(uniqueBindingSites)
curBindingSites <- bindingSites[[x]][["sites"]]
##
for (z in 1:curNumPWM){
compBindingSites <- uniqueBindingSites[[z]][["sites"]]
cat(addPWM, "\n")
##
if (identical(curBindingSites, compBindingSites)){
cat("sites are identical", "\n")
addPWM <- "NO"}} # end for (z in 1:curNumPWM)}
if (addPWM == "YES"){
uniqueBindingSites[PWMidx] <- bindingSites[x]
PWMidx <- (PWMidx + 1)}
} # end for (x in 2:numMotif)
##
bindingSites <- uniqueBindingSites
numMotif <- length(bindingSites)
View(bindingSites)
View(bindingSites)
bindingSites[[1]][["sites"]]@elementMetadata@PWM <- bindingSites[[1]][["PWM"]]
bindingSites[[1]][["sites"]]@elementMetadata$PWM <- bindingSites[[1]][["PWM"]]
bindingSites[[1]][["sites"]]@elementMetadata@metadata <- bindingSites[[1]][["PWM"]]
bindingSites[[1]][["sites"]]@elementMetadata@metadata <- bindingSites[1]["PWM"]
View(bindingSites)
View(bindingSites)
bindingSites[[1]][["sites"]]@elementMetadata@metadata[[1]]
bindingSites[[1]][["sites"]]@elementMetadata@listData$'PWM' <- bindingSites[1]["PWM"]
View(bindingSites)
View(bindingSites)
bindingSites[[1]][["sites"]]@elementMetadata@listData$'PWM' <- bindingSites[[1]][["PWM"]]
View(bindingSites)
View(bindingSites)
load("C:/Users/Jordan/Desktop/test/MAFF.bindingSites.Rdata")
## Restructure bindingSites object to store PWM in metadata
cat("Restructuring bindingSites object", "\n")
numMotif <- length(bindingSites)
for (aa in 1:numMotif){
bindingSites[[aa]][["sites"]]@elementMetadata@listData$'PWM' <- bindingSites[[aa]][["PWM"]]
}
View(bindingSites)
View(bindingSites)
bindingSites <- bindingSites[[]][["sites"]]
bindingSites <- bindingSites[]["sites"]
load("C:/Users/Jordan/Desktop/test/MAFF.bindingSites.Rdata")
## Restructure bindingSites object to store PWM in metadata
cat("Restructuring bindingSites object", "\n")
numMotif <- length(bindingSites)
for (aa in 1:numMotif){
bindingSites[[aa]][["sites"]]@elementMetadata@listData$'PWM' <- bindingSites[[aa]][["PWM"]]
}
bindingSites <- bindingSites[]["sites"]
View(bindingSites)
View(bindingSites)
View(bindingSites)
View(bindingSites)
load("C:/Users/Jordan/Desktop/test/MAFF.bindingSites.Rdata")
## Restructure bindingSites object to store PWM in metadata
cat("Restructuring bindingSites object", "\n")
numMotif <- length(bindingSites)
for (aa in 1:numMotif){
bindingSites[[aa]][["sites"]]@elementMetadata@listData$'PWM' <- bindingSites[[aa]][["PWM"]]
}
for (aa in 1:numMotif){
bindingSites[[ab]] <- bindingSites[[ab]][["sites"]]
}
for (ab in 1:numMotif){
bindingSites[[ab]] <- bindingSites[[ab]][["sites"]]
}
View(bindingSites)
View(bindingSites)
numMotif <- length(bindingSites)
## Remove motifs with 0 binding sites
cat("Removing motifs that matched 0 genomic loci", "\n")
numMotif <- length(bindingSites)
numSites <- c()
##
for (l in 1:numMotif){numSites[l] <- length(bindingSites[[l]][["sites"]]@ranges)}
zeroIdx <- which(numSites == 0)
bindingSites <- bindingSites[-zeroIdx]
numMotif <- length(bindingSites)
load("C:/Users/Jordan/Desktop/test/MAFF.bindingSites.Rdata")
## Restructure bindingSites object to store PWM in metadata
cat("Restructuring bindingSites object", "\n")
numMotif <- length(bindingSites)
##
for (aa in 1:numMotif){
bindingSites[[aa]][["sites"]]@elementMetadata@listData$'PWM' <- bindingSites[[aa]][["PWM"]]}
##
for (ab in 1:numMotif){
bindingSites[[ab]] <- bindingSites[[ab]][["sites"]]}
## Remove motifs with 0 binding sites
cat("Removing motifs that matched 0 genomic loci", "\n")
numMotif <- length(bindingSites)
numSites <- c()
##
for (l in 1:numMotif){numSites[l] <- length(bindingSites[[l]]@ranges)}
zeroIdx <- which(numSites == 0)
bindingSites <- bindingSites[-zeroIdx]
numMotif <- length(bindingSites)
View(bindingSites)
View(bindingSites)
View(bindingSites)
View(bindingSites)
View(bindingSites)
View(bindingSites)
identical(bindingSites[[2]]@ranges, bindingSites[[3]]@ranges)
## Subset to unique PWM only ##
cat("Removing duplicate motifs", "\n")
uniqueBindingSites <- list()
uniqueBindingSites[1] <- bindingSites[1]
PWMidx <- 2
##
for (x in 2:numMotif){
addPWM <- "YES"
curNumPWM <- length(uniqueBindingSites)
curBindingSites <- bindingSites[[x]]@ranges
##
for (z in 1:curNumPWM){
compBindingSites <- uniqueBindingSites[[z]]@ranges
cat(addPWM, "\n")
##
if (identical(curBindingSites, compBindingSites)){
cat("sites are identical", "\n")
addPWM <- "NO"}} # end for (z in 1:curNumPWM)}
if (addPWM == "YES"){
uniqueBindingSites[PWMidx] <- bindingSites[x]
PWMidx <- (PWMidx + 1)}
} # end for (x in 2:numMotif)
##
bindingSites <- uniqueBindingSites
numMotif <- length(bindingSites)
View(bindingSites)
View(bindingSites)
length(bindingSites[[1]]@ranges)
load("C:/Users/Jordan/Desktop/NFIL3.bindingSites.Rdata")
View(bindingSites)
View(bindingSites)
View(bindingSites)
View(bindingSites)
numMotif <- length(bindingSites)
cat("Found", numMotif, "motifs", "\n")
## Restructure bindingSites object to store PWM in metadata
cat("Restructuring bindingSites object", "\n")
##
for (aa in 1:numMotif){
bindingSites[[aa]][["sites"]]@elementMetadata@listData$'PWM' <- bindingSites[[aa]][["PWM"]]}
##
for (ab in 1:numMotif){
bindingSites[[ab]] <- bindingSites[[ab]][["sites"]]}
##
cat(numMotif, "motifs remain", "\n")
## Remove motifs with 0 binding sites
cat("Removing motifs that matched 0 genomic loci", "\n")
numMotif <- length(bindingSites)
numSites <- c()
##
for (l in 1:numMotif){numSites[l] <- length(bindingSites[[l]]@ranges)}
zeroIdx <- which(numSites == 0)
bindingSites <- bindingSites[-zeroIdx]
numMotif <- length(bindingSites)
cat(numMotif, "motifs remain", "\n")
length(zeroIdx)
load("C:/Users/Jordan/Desktop/NFIL3.bindingSites.Rdata")
##
numMotif <- length(bindingSites)
cat("Found", numMotif, "motifs", "\n")
## Restructure bindingSites object to store PWM in metadata
cat("Restructuring bindingSites object", "\n")
##
for (aa in 1:numMotif){
bindingSites[[aa]][["sites"]]@elementMetadata@listData$'PWM' <- bindingSites[[aa]][["PWM"]]}
##
for (ab in 1:numMotif){
bindingSites[[ab]] <- bindingSites[[ab]][["sites"]]}
##
cat(numMotif, "motifs remain", "\n")
## Remove motifs with 0 binding sites
cat("Removing motifs that matched 0 genomic loci", "\n")
numMotif <- length(bindingSites)
numSites <- c()
##
for (l in 1:numMotif){numSites[l] <- length(bindingSites[[l]]@ranges)}
##
zeroIdx <- which(numSites == 0)
if (length(zeroIdx) != 0){
bindingSites <- bindingSites[-zeroIdx]
}
##
numMotif <- length(bindingSites)
cat(numMotif, "motifs remain", "\n")
## Subset to unique PWM only ##
cat("Removing duplicate motifs", "\n")
uniqueBindingSites <- list()
uniqueBindingSites[1] <- bindingSites[1]
PWMidx <- 2
##
for (x in 2:numMotif){
#cat ("x =", x, "\n")
addPWM <- "YES"
curNumPWM <- length(uniqueBindingSites)
curBindingSites <- bindingSites[[x]]@ranges
##
for (z in 1:curNumPWM){
#cat ("z =", z, "\n")
compBindingSites <- uniqueBindingSites[[z]]@ranges
cat(addPWM, "\n")
##
if (identical(curBindingSites, compBindingSites)){
#cat("sites are identical", "\n")
addPWM <- "NO"}} # end for (z in 1:curNumPWM)}
if (addPWM == "YES"){
uniqueBindingSites[PWMidx] <- bindingSites[x]
PWMidx <- (PWMidx + 1)}
#cat("PWMidx =", PWMidx, "\n")
} # end for (x in 2:numMotif)
##
bindingSites <- uniqueBindingSites
numMotif <- length(bindingSites)
cat(numMotif, "motifs remain", "\n")
View(bindingSites)
View(bindingSites)
b <- 1
genomeSites <- bindingSites[b]@ranges
genomeSites <- bindingSites[[b]]@ranges
View(genomeSites)
View(genomeSites)
genomeSites <- bindingSites[b]
View(genomeSites)
View(genomeSites)
genomeSites <- bindingSites[[b]]
genomeSites <- keepStandardChromosomes(genomeSites, pruning.mode="coarse")
genomeSites <- keepSeqlevels(genomeSites, scope, pruning.mode="coarse")
genomeSites <- trim(genomeSites, use.names = TRUE)
numSites <- length(genomeSites)
View(genomeSites)
View(genomeSites)
View(genomeSites)
View(genomeSites)
cat("Processing binding sites", "\n")
scope <- paste0("chr", c(1:22, "X", "Y"))
genomeSites <- bindingSites[b]
## Trim the matched binding sites to the standard chromosomes only
genomeSites <- keepStandardChromosomes(genomeSites, pruning.mode="coarse")
genomeSites <- keepSeqlevels(genomeSites, scope, pruning.mode="coarse")
genomeSites <- trim(genomeSites, use.names = TRUE)
numSites <- length(genomeSites)
cat("Analyzing motif", b, "\n")
## Binding Sites
cat("Processing binding sites", "\n")
scope <- paste0("chr", c(1:22, "X", "Y"))
genomeSites <- bindingSites[[b]]
## Trim the matched binding sites to the standard chromosomes only
genomeSites <- keepStandardChromosomes(genomeSites, pruning.mode="coarse")
genomeSites <- keepSeqlevels(genomeSites, scope, pruning.mode="coarse")
genomeSites <- trim(genomeSites, use.names = TRUE)
numSites <- length(genomeSites)
View(genomeSites)
View(genomeSites)
View(bindingSites)
View(bindingSites)
cat("Analyzing motif", b, "\n")
## Binding Sites
cat("Processing binding sites", "\n")
scope <- paste0("chr", c(1:22, "X", "Y"))
genomeSites <- c(bindingSites[[b]])
## Trim the matched binding sites to the standard chromosomes only
genomeSites <- keepStandardChromosomes(genomeSites, pruning.mode="coarse")
genomeSites <- keepSeqlevels(genomeSites, scope, pruning.mode="coarse")
genomeSites <- trim(genomeSites, use.names = TRUE)
numSites <- length(genomeSites)
load("C:/Users/Jordan/Desktop/NFIL3.bindingSites.Rdata")
numMotif <- length(bindingSites)
cat("Found", numMotif, "motifs", "\n")
## Restructure bindingSites object to store PWM in metadata
cat("Restructuring bindingSites object", "\n")
##
#for (aa in 1:numMotif){
#  bindingSites[[aa]][["sites"]]@elementMetadata@listData$'PWM' <- bindingSites[[aa]][["PWM"]]}
##
for (ab in 1:numMotif){
bindingSites[[ab]] <- bindingSites[[ab]][["sites"]]}
##
cat(numMotif, "motifs remain", "\n")
## Remove motifs with 0 binding sites
cat("Removing motifs that matched 0 genomic loci", "\n")
numMotif <- length(bindingSites)
numSites <- c()
##
for (l in 1:numMotif){numSites[l] <- length(bindingSites[[l]]@ranges)}
##
zeroIdx <- which(numSites == 0)
if (length(zeroIdx) != 0){
bindingSites <- bindingSites[-zeroIdx]
}
##
numMotif <- length(bindingSites)
cat(numMotif, "motifs remain", "\n")
## Subset to unique PWM only ##
cat("Removing duplicate motifs", "\n")
uniqueBindingSites <- list()
uniqueBindingSites[1] <- bindingSites[1]
PWMidx <- 2
##
for (x in 2:numMotif){
#cat ("x =", x, "\n")
addPWM <- "YES"
curNumPWM <- length(uniqueBindingSites)
curBindingSites <- bindingSites[[x]]@ranges
##
for (z in 1:curNumPWM){
#cat ("z =", z, "\n")
compBindingSites <- uniqueBindingSites[[z]]@ranges
cat(addPWM, "\n")
##
if (identical(curBindingSites, compBindingSites)){
#cat("sites are identical", "\n")
addPWM <- "NO"}} # end for (z in 1:curNumPWM)}
if (addPWM == "YES"){
uniqueBindingSites[PWMidx] <- bindingSites[x]
PWMidx <- (PWMidx + 1)}
#cat("PWMidx =", PWMidx, "\n")
} # end for (x in 2:numMotif)
##
bindingSites <- uniqueBindingSites
numMotif <- length(bindingSites)
cat(numMotif, "motifs remain", "\n")
idxMotif <- 1
b <- 1
cat("Analyzing motif", b, "\n")
## Binding Sites
cat("Processing binding sites", "\n")
scope <- paste0("chr", c(1:22, "X", "Y"))
genomeSites <- bindingSites[[b]]
## Trim the matched binding sites to the standard chromosomes only
genomeSites <- keepStandardChromosomes(genomeSites, pruning.mode="coarse")
genomeSites <- keepSeqlevels(genomeSites, scope, pruning.mode="coarse")
genomeSites <- trim(genomeSites, use.names = TRUE)
numSites <- length(genomeSites)
View(bindingSites)
View(bindingSites)
load("C:/Users/Jordan/Desktop/test/MAFF.bindingSites.Rdata")
numMotif <- length(bindingSites)
cat("Found", numMotif, "motifs", "\n")
## Remove motifs with 0 binding sites
cat("Removing motifs that matched 0 genomic loci", "\n")
numMotif <- length(bindingSites)
numSites <- c()
##
for (l in 1:numMotif){numSites[l] <- length(bindingSites[[l]][["sites"]]@ranges)}
##
zeroIdx <- which(numSites == 0)
if (length(zeroIdx) != 0){
bindingSites <- bindingSites[-zeroIdx]
}
##
numMotif <- length(bindingSites)
cat(numMotif, "motifs remain", "\n")
bs1 <- bindingSites[1]
View(bs1)
View(bs1)
for (ll in 1:numMotif){bsAll[ll] <- bindingSites[[ll]][["sites"]]@ranges)}
bsAll <- list()
for (ll in 1:numMotif){bsAll[ll] <- bindingSites[[ll]][["sites"]]@ranges}
for (ll in 1:numMotif){bsAll[ll] <- bindingSites[ll]["sites"]@ranges}
View(bindingSites)
View(bindingSites)
for (ll in 1:numMotif){bsAll[ll] <- bindingSites[[ll]][["sites"]]@ranges}
View(bsAll)
View(bsAll)
identical(bsAll[[2]], bsAll[[3]])
View(bs1)
View(bs1)
rlist::list.cases(bindingSites)
View(bindingSites)
View(bindingSites)
rlist::list.cases(bindingSites[[1]][["PWM"]])
rlist::list.cases(bindingSites[[]][["PWM"]])
rlist::list.cases(bindingSites[][["PWM"]])
rlist::list.cases(bindingSites[["PWM"]])
View(bindingSites)
View(bindingSites)
cat("Splitting bindingSites object", "\n")
splitPWM <- list()
splitSites <- list()
for (l in 1:numMotif){
splitPWM[l] <- bindingSites[[l]][["PWM"]]
splitSites[l] <- bindingSites[[l]][["sites"]]
}
View(splitPWM)
View(splitPWM)
## Split the bindingSites list to PWM and sites
cat("Splitting bindingSites object", "\n")
splitPWM <- list()
splitSites <- list()
for (l in 1:numMotif){
splitPWM[l] <- bindingSites[l]@PWM
splitSites[l] <- bindingSites[l]@sites
}
View(bindingSites)
View(bindingSites)
cat("Splitting bindingSites object", "\n")
splitPWM <- list()
splitSites <- list()
for (l in 1:numMotif){
splitPWM[l] <- bindingSites[[l]]@PWM
splitSites[l] <- bindingSites[[l]]@sites
}
cat("Splitting bindingSites object", "\n")
splitPWM <- list()
splitSites <- list()
for (l in 1:numMotif){
splitPWM[l] <- bindingSites[[l]]['PWM']
}
View(splitPWM)
View(splitPWM)
cat("Splitting bindingSites object", "\n")
splitPWM <- list()
splitSites <- list()
for (l in 1:numMotif){
splitPWM[l] <- bindingSites[[l]]['PWM']
splitSites[l] <- bindingSites[[l]]['sites']
}
View(splitSites)
View(splitSites)
length(unique(splitSites))
length(unique(splitPWM))
length(unique(splitPWM[]))
length(unique(splitPWM[[]]))
View(splitPWM)
View(splitPWM)
length(unique(splitPWM[[1:3]]))
length(unique(splitPWM[1:3]))
length(unique(splitSites[1:3]))
load("C:/Users/Jordan/Desktop/H508A-WT-02.TFAP2A.rawFootprintData.Rdata")
View(footprintData)
View(footprintData)
