load("C:/Users/jsk33/Desktop/H508A-WT-02.ODC1.rawFootprintData.Rdata")
View(footprintData)
View(footprintData)
## To avoid errors, clear the list of any empty sub-lists first
footprintData <- list.clean(footprintData, function(footprintData) length(footprintData) == 0L, TRUE)
suppressMessages(library(BiocGenerics))
suppressMessages(library(GenomicRanges))
suppressMessages(library(GenomicAlignments))
suppressMessages(library(stats4))
suppressMessages(library(Rsamtools))
suppressMessages(library(genomation))
suppressMessages(library(seqLogo))
suppressMessages(library(ChIPpeakAnno))
suppressMessages(library(rlist))
## To avoid errors, clear the list of any empty sub-lists first
footprintData <- list.clean(footprintData, function(footprintData) length(footprintData) == 0L, TRUE)
geneName <- "TEST"
peaksPath <- "C:\\Users\\jsk33\\Desktop\\bug\\H508A-WT-02-merged_global_normalization_peaks.narrowPeak"
## Initialize a list to store the parsed data
parsedFootprintData <- list()
##
motifIdx <- 1
## Performing parsing operations
numMotif <- length(footprintData)
motifNames <- names(footprintData)
cat("Parsing footprint data for gene", geneName, "with", numMotif, "unique motifs", "\n")
scope <- paste0("chr", c(1:22, "X", "Y"))
grPeaks <- readBed(peaksPath, track.line = FALSE, remove.unusual = FALSE, zero.based = TRUE)
grPeaks <- keepStandardChromosomes(grPeaks, pruning.mode="coarse")
grPeaks <- keepSeqlevels(grPeaks, scope, pruning.mode="coarse")
grPeaks <- trim(grPeaks, use.names = TRUE)
############################################################
## Load the temporary data
com <- paste0("tempData <- footprintData$", motifNames[a])
eval(parse(text = com))
##
librarySize <- tempData[["librarySize"]]
coverageSize <- tempData[["coverageSize"]]
libraryFactor <- tempData[["libraryFactor"]]
PWM <- tempData[["PWM"]]
genomeSites <- tempData[["genomeSites"]]
numGenomeSites <- tempData[["numGenomeSites"]]
motifWidth <- tempData[["motifWidth"]]
extendedSites <- tempData[["extendedSites"]]
insertionMatrix <- tempData[["insertionMatrix"]]
############################################################
motifNames <- names(footprintData)
############################################################
## Load the temporary data
com <- paste0("tempData <- footprintData$", motifNames[a])
eval(parse(text = com))
##
librarySize <- tempData[["librarySize"]]
coverageSize <- tempData[["coverageSize"]]
libraryFactor <- tempData[["libraryFactor"]]
PWM <- tempData[["PWM"]]
genomeSites <- tempData[["genomeSites"]]
numGenomeSites <- tempData[["numGenomeSites"]]
motifWidth <- tempData[["motifWidth"]]
extendedSites <- tempData[["extendedSites"]]
insertionMatrix <- tempData[["insertionMatrix"]]
############################################################
tempData <- list()
com <- paste0("tempData <- footprintData$", motifNames[a])
eval(parse(text = com))
##
librarySize <- tempData[["librarySize"]]
coverageSize <- tempData[["coverageSize"]]
libraryFactor <- tempData[["libraryFactor"]]
PWM <- tempData[["PWM"]]
genomeSites <- tempData[["genomeSites"]]
numGenomeSites <- tempData[["numGenomeSites"]]
motifWidth <- tempData[["motifWidth"]]
extendedSites <- tempData[["extendedSites"]]
insertionMatrix <- tempData[["insertionMatrix"]]
## Calculate total signal for each site
siteTotalSignal <- c()
for (b in 1:numGenomeSites){
siteTotalSignal[b] <- sum(insertionMatrix[b,])
} # end for (b in 1:numGenomeSites)
a <- 1
############################################################
## Load the temporary data
tempData <- list()
com <- paste0("tempData <- footprintData$", motifNames[a])
eval(parse(text = com))
##
librarySize <- tempData[["librarySize"]]
coverageSize <- tempData[["coverageSize"]]
libraryFactor <- tempData[["libraryFactor"]]
PWM <- tempData[["PWM"]]
genomeSites <- tempData[["genomeSites"]]
numGenomeSites <- tempData[["numGenomeSites"]]
motifWidth <- tempData[["motifWidth"]]
extendedSites <- tempData[["extendedSites"]]
insertionMatrix <- tempData[["insertionMatrix"]]
############################################################
## Calculate total signal for each site
siteTotalSignal <- c()
for (b in 1:numGenomeSites){
siteTotalSignal[b] <- sum(insertionMatrix[b,])
} # end for (b in 1:numGenomeSites)
uniqueTotalSiteSignals <- unique(siteTotalSignal)
## Remove NA values from uniqueTotalSignals
## (how do they get there???)
uniqueTotalSiteSignals <- uniqueTotalSiteSignals[!is.na(uniqueTotalSiteSignals)]
## Initiate a matrix to store the mean null signal in the null model and the input signal to null model
nullModels <- matrix(data = NA, ncol = 2, nrow = length(uniqueTotalSiteSignals))
colnames(nullModels) <- c("Total input signal", "Mean null motif signal")
## Calculate the null models
for (c in 1:length(uniqueTotalSiteSignals)){
nullVec <- generateNullFP(1000, uniqueTotalSiteSignals[c], (500 + motifWidth), motifWidth)
nullModels[c,1] <- uniqueTotalSiteSignals[c]
nullModels[c,2] <- mean(nullVec)
} # end for (c in 1:length(uniqueTotalSignals))
cat("Building functions", "\n")
generateNullFP <- function(iterations, inputSignal, analysisWidth, motifWidth){
# This script will be used to generate indiviudal null models at predicted motif binding sites across the genome when scanning for TF footprinting from ATAC-seq data. To generate these null models, the current model will need to:
#- Consider the total signal (number of insertions) at each specific ~200 bp locus
#- Use the actul underlying reference sequence of that ~200 bp stretch from the hg38 reference genome
#- Use published or experimentally derived models of Tn5 sequence specific insertion bias
#- For each locus, build a probablistic model of insertion site distributions based on the underlying sequence and Tn5 insertion bias
#- Generate the null model graph by weighted random residstribution of the total observed signal at that site
#- Importantly, the null model must be generated separately for the plus and minus strand, it can then be combined and compared to the combined signal from the reference observed signal at that sequence
# These null models can then be used for a site-by-site comparison of the null model against the observed data to accept or reject the null hypothesis
# iterations = number of iterations
# inputSignals = unique values for total signal
# analysisWidth = total bp in region of interest (flank + background + motif)
# motifWidth = motif width
##
#cat("Generating a null footprint model with the following parameters:", "\n")
#cat("Iterations:", iterations, "\n")
#cat("Input signal:", inputSignal, "\n")
#cat("Analysis window (bp):", analysisWidth, "\n")
#cat("Motif width (bp):", motifWidth, "\n")
# declare vector of size n to store average motif signal values
averages <- c()
# generate the null models and calculate motif averages
for (a in 1:iterations){
# declare the null vector
null <- c(1:(analysisWidth))
# randomly distribute the total signal
# size = the number of values to distribute
# prob = probability of each site
# length = length of the generated vector
null <- c(as.vector(rmultinom(1, size=inputSignal, prob=rep(1, length(null)))))
## Calculate the mean signal in motif region
motifStart <- ((analysisWidth - motifWidth)/2)
motifEnd <- (motifStart + motifWidth)
motifAvg <- (sum(null[motifStart:motifEnd])) / motifWidth
## Store the average values
averages[a] <- motifAvg
} # end for (a in 1:n)
return(averages)
} # end generateNullFP function
## Calculate the null models
for (c in 1:length(uniqueTotalSiteSignals)){
nullVec <- generateNullFP(1000, uniqueTotalSiteSignals[c], (500 + motifWidth), motifWidth)
nullModels[c,1] <- uniqueTotalSiteSignals[c]
nullModels[c,2] <- mean(nullVec)
} # end for (c in 1:length(uniqueTotalSignals))
## Perform a one-tailed t-test to generate a p-value for each observed motif site
cat("Performing one-tailed t-tests on binding site mean motif signal against null models", "\n")
ttest <- list() # list to store the results of the t-tests
pvalue <- c() # vector to store the p-values
tvalue <- c() # vector to store the t-value
## Perform t-test on all sites
for (d in 1:numGenomeSites){
## Retrieve the total signal for the current site
currentSignal <- c(siteTotalSignal[d])
## Retrieve the appropriate null model
currentNullModel <- nullModels[which(nullModels[,1] == currentSignal),2]
## Perform the t-test
ttest[[d]] <- t.test(insertionMatrix[d, 250:(250 + motifWidth)], mu = currentNullModel, alternative = "less", conf.level = 0.95)
pvalue[d] <- ttest[[d]][["p.value"]]
tvalue[d] <- ttest[[d]][["statistic"]][["t"]]
} # for (d in 1:numGenomeSites)
## Get the indices of the sites that are lower than p = 0.05
cat("Selecting p-value passing sites", "\n")
pvaluePassSiteIdx <- which(pvalue < 0.05)
## Perform bonferroni correction
cat("Performing bonferroni correction", "\n")
bfPvalueSiteIdx <- which(pvalue < (0.05 / numGenomeSites))
############################################################
## Bound genome sites subset
boundGenomeSites <- genomeSites[bfPvalueSiteIdx]
numBoundGenomeSites <- length(boundGenomeSites)
## Unbound genome sites subset
unboundGenomeSites <- genomeSites[-bfPvalueSiteIdx]
numUnboundGenomeSites <- length(unboundGenomeSites)
############################################################
############################################################
## Analyze the binding sites in peaks
cat("Processing binding sites in accessibility peaks", "\n")
peakOverlaps <- findOverlaps(genomeSites, grPeaks)
peakIndex <- unique(peakOverlaps@from)
peakSites <- genomeSites[peakIndex]
peakSites <- keepStandardChromosomes(peakSites, pruning.mode="coarse")
peakSites <- keepSeqlevels(peakSites, scope, pruning.mode="coarse")
peakSites <- trim(peakSites, use.names = TRUE)
numPeakSites <- length(peakSites)
cat("Found", numPeakSites, " binding sites in peak accessibility regions", "\n")
boundPeakOverlap <- findOverlaps(peakSites, boundGenomeSites)
boundPeakIndex <- unique(boundPeakOverlap@to)
boundPeakSites <- boundGenomeSites[boundPeakIndex]
numBoundPeakSites <- length(boundPeakSites)
##
unboundPeakOverlap <- findOverlaps(peakSites, unboundGenomeSites)
unboundPeakIndex <- unique(unboundPeakOverlap@to)
unboundPeakSites <- unboundGenomeSites[unboundPeakIndex]
numUnboundPeakSites <- length(unboundPeakSites)
## Calculate flanking accessibility and footprint depth data
cat("Calculating flanking accessibility and footprint depth data", "\n")
siteFootprintMetrics <- matrix(data = NA, ncol = 5, nrow = numGenomeSites)
##
colnames(siteFootprintMetrics) <- c("Background signal/bp", "Flank signal/bp", "Motif signal/bp",
"Flanking Accessibility", "Footprint Depth")
##
for (e in 1:numGenomeSites){
## Backgroup signal per bp
siteFootprintMetrics[e,1] <- ((sum(insertionMatrix[e, 1:50]) +
sum(insertionMatrix[e, (450 + motifWidth):(500 + motifWidth)])) /
100)
## Flank signal per bp
siteFootprintMetrics[e,2] <- ((sum(insertionMatrix[e, 200:250]) +
sum(insertionMatrix[e, (200 + motifWidth):(250 + motifWidth)])) /
100)
## Motif signal per bp
siteFootprintMetrics[e,3] <- (sum(insertionMatrix[e, (250:(250 + motifWidth))]) /
motifWidth)
## Flanking accessibility (Flanking signal / backgroun signal)
siteFootprintMetrics[e,4] <- (siteFootprintMetrics[e,2] / siteFootprintMetrics[e,1])
## Footprint depth (Motif signal / flank signal)
siteFootprintMetrics[e,5] <- (siteFootprintMetrics[e,3] / siteFootprintMetrics[e,2])
} # end (for e in 1:numGenomeSites)
View(siteFootprintMetrics)
View(siteFootprintMetrics)
############################################################
## Data transfer to storage object and save
cat("Transferring data to parsedFootprintData storage object", "\n")
tempData <- list()
##
tempData$librarySize <- librarySize
tempData$coverageSize <- coverageSize
tempData$libraryFactor <- libraryFactor
tempData$PWM <- PWM
tempData$genomeSites <- genomeSites
tempData$numGenomeSites <- numGenomeSites
tempData$motifWidth <- motifWidth
tempData$extendedSites <- extendedSites
tempData$insertionMatrix <- insertionMatrix
##
tempData$siteTotalSignal <- siteTotalSignal
tempData$uniqueTotalSiteSignals <- uniqueTotalSiteSignals
tempData$nullModels <- nullModels
tempData$ttest <- ttest
tempData$pvalue <- pvalue
tempData$tvalue <- tvalue
tempData$pvaluePassSiteIdx <- pvaluePassSiteIdx
tempData$bfPvalueSiteIdx <- bfPvalueSiteIdx
##
tempData$boundGenomeSites <- boundGenomeSites
tempData$numBoundGenomeSites <- numBoundGenomeSites
##
tempData$unboundGenomeSites <- unboundGenomeSites
tempData$numUnboundGenomeSites <- numUnboundGenomeSites
##
tempData$peakOverlaps <- peakOverlaps
tempData$peakIndex <- peakIndex
tempData$peakSites <- peakSites
tempData$numPeakSites <- numPeakSites
##
tempData$boundPeakOverlap <- boundPeakOverlap
tempData$boundPeakIndex <- boundPeakIndex
tempData$boundPeakSites <- boundPeakSites
tempData$numBoundPeakSites <- numBoundPeakSites
##
tempData$unboundPeakOverlap <- unboundPeakOverlap
tempData$unboundPeakIndex <- unboundPeakIndex
tempData$unboundPeakSites <- unboundPeakSites
tempData$numUnboundPeakSites <- numUnboundPeakSites
##
tempData$siteFootprintMetrics <- siteFootprintMetrics
## Transfer to the data storage object
com <- paste0("parsedFootprintData$motif", motifIdx, " <- tempData")
eval(parse(text = com))
View(parsedFootprintData)
View(parsedFootprintData)
load("C:/Users/Jordan/Desktop/LNCaP-WT-02.totalreads.Rdata")
cat("Found", sampleTotalReads, "total reads in current sample", "\n")
load("C:/Users/Jordan/Desktop/LNCaP-WT-02.MCR.parsedFootprintData.Rdata")
View(footprintData)
View(footprintData)
####
namePath <- "C:\\Users\\jsk33\\Documents\\git\\atacPipelineMaster\\panTF\\names\\bindingSitesSizeOrdered.txt"
orderedNames <- readLines(namePath)
numGenes <- length(orderedNames)
strings <- c()
a <- 1 # count for genes
b <- 1 # string index (group)
#### Groups 1-40
while (b <= 40){
##
c <- a
d <- a+1
e <- a+2
f <- a+3
g <- a+4
h <- a+5
i <- a+6
j <- a+7
k <- a+8
l <- a+9
m <- a+10
n <- a+11
o <- a+12
p <- a+13
q <- a+14
r <- a+15
s <- a+16
t <- a+17
u <- a+18
v <- a+19
##
tmp1 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[c], ".graphFP.bamcopy1.done", "', ")
tmp2 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[d], ".graphFP.bamcopy2.done", "', ")
tmp3 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[e], ".graphFP.bamcopy3.done", "', ")
tmp4 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[f], ".graphFP.bamcopy4.done", "', ")
tmp5 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[g], ".graphFP.bamcopy5.done", "', ")
tmp6 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[h], ".graphFP.bamcopy6.done", "', ")
tmp7 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[i], ".graphFP.bamcopy7.done", "', ")
tmp8 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[j], ".graphFP.bamcopy8.done", "', ")
tmp9 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[k], ".graphFP.bamcopy9.done", "', ")
tmp10 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[l], ".graphFP.bamcopy10.done", "', ")
tmp11 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[m], ".graphFP.bamcopy11.done", "', ")
tmp12 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[n], ".graphFP.bamcopy12.done", "', ")
tmp13 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[o], ".graphFP.bamcopy13.done", "', ")
tmp14 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[p], ".graphFP.bamcopy14.done", "', ")
tmp15 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[q], ".graphFP.bamcopy15.done", "', ")
tmp16 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[r], ".graphFP.bamcopy16.done", "', ")
tmp17 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[s], ".graphFP.bamcopy17.done", "', ")
tmp18 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[t], ".graphFP.bamcopy18.done", "', ")
tmp19 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[u], ".graphFP.bamcopy19.done", "', ")
tmp20 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[v], ".graphFP.bamcopy20.done", "'")
##
strings[b] <- paste0(
"rule graphFP_group",
b,
":\n",
"\tinput:\n\t\t",
tmp1, "\n\t\t", tmp2, "\n\t\t", tmp3, "\n\t\t", tmp4, "\n\t\t", tmp5, "\n\t\t",
tmp6, "\n\t\t", tmp7, "\n\t\t", tmp8, "\n\t\t", tmp9, "\n\t\t", tmp10, "\n\t\t",
tmp11, "\n\t\t", tmp12, "\n\t\t", tmp13, "\n\t\t", tmp14, "\n\t\t", tmp15, "\n\t\t",
tmp16, "\n\t\t", tmp17, "\n\t\t", tmp18, "\n\t\t", tmp19, "\n\t\t", tmp20, "\n\t",
"output:\n\t\t",
"'{path}footprints/operations/groups/{mergedsample}.graphFP.group", b, ".done'\n",
"\tshell:\n\t\t",
"'touch {output}'")
##
a <- a+20
b <- b+1
}
#### Groups 40-55
while (b <= 55){
##
c <- a
d <- a+1
e <- a+2
f <- a+3
g <- a+4
h <- a+5
i <- a+6
j <- a+7
k <- a+8
l <- a+9
##
tmp1 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[c], ".graphFP.bamcopy1.done", "', ")
tmp2 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[d], ".graphFP.bamcopy2.done", "', ")
tmp3 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[e], ".graphFP.bamcopy3.done", "', ")
tmp4 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[f], ".graphFP.bamcopy4.done", "', ")
tmp5 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[g], ".graphFP.bamcopy5.done", "', ")
tmp6 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[h], ".graphFP.bamcopy6.done", "', ")
tmp7 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[i], ".graphFP.bamcopy7.done", "', ")
tmp8 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[j], ".graphFP.bamcopy8.done", "', ")
tmp9 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[k], ".graphFP.bamcopy9.done", "', ")
tmp10 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[l], ".graphFP.bamcopy10.done", "', ")
##
strings[b] <- paste0(
"rule graphFP_group",
b,
":\n",
"\tinput:\n\t\t",
tmp1, "\n\t\t", tmp2, "\n\t\t", tmp3, "\n\t\t", tmp4, "\n\t\t", tmp5, "\n\t\t",
tmp6, "\n\t\t", tmp7, "\n\t\t", tmp8, "\n\t\t", tmp9, "\n\t\t", tmp10, "\n\t",
"output:\n\t\t",
"'{path}footprints/operations/groups/{mergedsample}.graphFP.group", b, ".done'\n",
"\tshell:\n\t\t",
"'touch {output}'")
##
a <- a+10
b <- b+1
}
## Remaining
while (a <= 1229){
##
c <- a
d <- a+1
e <- a+2
f <- a+3
g <- a+4
##
tmp1 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[c], ".graphFP.bamcopy1.done", "', ")
tmp2 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[d], ".graphFP.bamcopy2.done", "', ")
tmp3 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[e], ".graphFP.bamcopy3.done", "', ")
tmp4 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[f], ".graphFP.bamcopy4.done", "', ")
tmp5 <- paste0("'{path}footprints/operations/graphs/{mergedsample}.", orderedNames[g], ".graphFP.bamcopy5.done", "', ")
##
strings[b] <- paste0(
"rule graphFP_group",
b,
":\n",
"\tinput:\n\t\t",
tmp1, "\n\t\t", tmp2, "\n\t\t", tmp3, "\n\t\t", tmp4, "\n\t\t", tmp5, "\n\t",
"output:\n\t\t",
"'{path}footprints/operations/groups/{mergedsample}.graphFP.group", b, ".done'\n",
"\tshell:\n\t\t",
"'touch {output}'")
##
a <- a+5
b <- b+1
}
#### Write the file ####
outPath <- "C:\\Users\\jsk33\\Documents\\git\\atacPipelineMaster\\panTF\\names\\panTFgraph.snakefile"
##
write.table(
strings,
file = outPath,
quote = FALSE,
sep = ",",
eol = "\n",
row.names = FALSE,
col.names = FALSE)
load("C:/Users/Jordan/Desktop/LNCaP-WT-01.KLF6.rawFootprintData.Rdata")
View(footprintData)
View(footprintData)
suppressMessages(library(GenomicRanges))
suppressMessages(library(stats4))
suppressMessages(library(BiocGenerics))
suppressMessages(library(parallel))
suppressMessages(library(Rsamtools))
suppressMessages(library(GenomicAlignments))
suppressMessages(library(genomation))
suppressMessages(library(seqLogo))
suppressMessages(library(ChIPpeakAnno))
suppressMessages(library(rlist))
suppressMessages(library(TxDb.Hsapiens.UCSC.hg38.knownGene))
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
txdb <- keepStandardChromosomes(txdb, pruning.mode="coarse")
txdb <- trim(txdb)
txdb <- keepStandardChromosomes(txdb, pruning.mode="coarse")
View(footprintData[["motif1"]][["insMatrix"]])
insMatrix <- footprintData[["motif1"]][["insMatrix"]])
insMatrix <- footprintData[["motif1"]][["insMatrix"]]
motifWidth <- 8
#### Generate the insertion site probability vector for raw data
rawInsProb <- c(sum(insMatrix[,1:(500+motifWidth)]))
rawInsProb
#### Generate the insertion site probability vector for raw data
rawInsProb[1:508] <- c(sum(insMatrix[,1:(500+motifWidth)]))
rawInsProb <- c()
for (c in 1:(500 + motifWidth)){
rawInsProb[c] <- sum(insMatrix[,c])
} # end for (c in 1:(500 + motifWidth))
View(rawInsProb)
rawTotalSignal<- sum(rawInsProb)
##
rawInsProb <- rawInsProb / rawTotalSignal
sum(rawInsProb)
#### Set hg38 number of bases (haploid)
hg38TotalBP <- 3272116950
gr <- hg38
seqinfo(hg38)
?seqinfo
library(BSgenome.Hsapiens.UCSC.hg38)
Hsapiens
chr1 <- Hsapiens[["chr1"]]
suppressMessages(library(GenomicRanges))
chr1 <- GRanges(chr1)
genome(gr) <- 'hg38'
Granges(hg38)
GRanges(hg38)
#### Make the hg38 GRanges reference
hg38 <- GRanges(seqinfo(BSgenome.Hsapiens.UCSC.hg38))
hg38 <- keepStandardChromosomes(hg38, pruning.mode="coarse")
hg38 <- trim(hg38)
View(hg38)
View(hg38)
#### Subset hg38 Granges reference to current chromosome
hg38 <- hg38["chr1"]
View(hg38)
View(hg38)
View(hg38)
View(hg38)
