library(GenomicRanges)
library(ggplot2)
library(mygene)
library(viper)
source("https://bioconductor.org/biocLite.R")
#biocLite("GenomicRanges", suppressUpdates = TRUE)
biocLite("mygene", suppressUpdates = TRUE)
library(GenomicRanges)
library(ggplot2)
library(mygene)
library(viper)
##
options(warn = -1)
options(scipen = 999)
fileList <- list.files("C:\Users\Jordan\Desktop\mdst8", full.names = TRUE)
## MDST8
geneNames <- substring(fileList, 65)
geneNames <- gsub(".parsedFootprintData.Rdata", "", geneNames)
#### Load and process the data from all genes ####
## List all the files that will be analyzed
fileList <- list.files("C:\Users\Jordan\Desktop\mdst8", full.names = TRUE)
fileList <- list.files("C:\\Users\\Jordan\\Desktop\\mdst8", full.names = TRUE)
geneNames <- substring(fileList, 65)
## MDST8
geneNames <- substring(fileList, 40)
## MDST8
geneNames <- substring(fileList, 43)
geneNames <- gsub(".parsedFootprintData.Rdata", "", geneNames)
## Setup : Load Packages #######################################################################################################
##
#source("https://bioconductor.org/biocLite.R")
#biocLite("GenomicRanges", suppressUpdates = TRUE)
#biocLite("mygene", suppressUpdates = TRUE)
#biocLite("viper", suppressUpdates = TRUE)
##
library(GenomicRanges)
library(ggplot2)
library(mygene)
library(viper)
##
options(warn = -1)
options(scipen = 999)
################################################################################################################################
#### Load and process the data from all genes ####
## List all the files that will be analyzed
fileList <- list.files("C:\\Users\\Jordan\\Desktop\\mdst8", full.names = TRUE)
## MDST8
geneNames <- substring(fileList, 43)
geneNames <- gsub(".parsedFootprintData.Rdata", "", geneNames)
## Load expression matrix
load("C:\\Users\\Jordan\\Desktop\\cclecounts.rda")
coadCounts <- cclecounts[["large_intestine_bat1"]]
##
#snu61Exp <- coadCounts[,24]
#h508Exp <- coadCounts[,7]
mdst8Exp <- coadCounts[,29]
##
expData <- mdst8Exp
## Load regulon
load("C:\\Users\\Jordan\\Desktop\\coad-tcga-regulon.rda")
##
geneList <- names(expData)
plotFPs <- function(fileList, geneNames, expData, regulonData){
## Inititate vectors for temporary data storage
tempFlank <- c()
tempMotif <- c()
tempBackground <- c()
## Index iterators for vectors
idxFlank <- 1
idxMotif <- 1
idxBackground <- 1
##
numFiles <- length(fileList)
#numFiles <- 10
## Iterate over each unique transcription factor
for (a in 1:numFiles){
cat("Processing input file ", a, "\n")
## Load the footprintData object
load(fileList[a])
## Create a temporary object for the current data
tempData <- footprintData
## Number of potential motifs to plot
numMotifs <- length(tempData)
if (numMotifs == 1){
mergedSites <- footprintData[["motif1"]][["peakSites"]]
mergedRawFootprintMetrics <- footprintData[["motif1"]][["rawFootprintMetrics"]]
} else {
## Pull the Granges and insertion matrices from the footprintData object
for (z in 1:numMotifs){
tryCatch({
com <- paste0("sites", z, " <- footprintData[['motif", z, "']][['peakSites']]")
eval(parse(text = com))
com <- paste0("rawFootprintMetrics", z, " <- footprintData[['motif", z, "']][['rawFootprintMetrics']]")
eval(parse(text = com))
}, # end try
error=function(cond){
message(cond)
return(NA)},
finally={})
} # end for (z in 1:numMotif)
## Merge the Granges objects
for (b in 2:numMotifs){
tryCatch({
com <- paste0("overlaps <- findOverlaps(sites1, sites", b,")")
eval(parse(text = com))
if (length(overlaps@from) == 0){
# If no overlaps are present, can just directly merge the two Granges
com <- paste0("sites1 <- c(sites1, sites", b, ")")
eval(parse(text = com))
com <- paste0("rawFootprintMetrics1 <- rbind(rawFootprintMetrics1, rawFootprintMetrics", b, ")")
eval(parse(text = com))
} else {
# If overlaps are present, merge only the non-overlapping ranges from the second Granges
mergeIdx <- overlaps@to
com <- paste0("sites1 <- c(sites1, sites", b, "[-mergeIdx])")
eval(parse(text = com))
com <- paste0("rawFootprintMetrics1 <- rbind(rawFootprintMetrics1, rawFootprintMetrics", b, "[-mergeIdx,])")
eval(parse(text = com))
} # end if (length(overlaps@from) == 0)
}, # end try
error=function(cond){
message(cond)
return(NA)},
finally={})
} # end for (b in 2:numMotifs)
mergedSites <- sites1
mergedRawFootprintMetrics <- rawFootprintMetrics1
} # end if (numMotifs == 1)
## Try to grab the data for each potential motif
tryCatch({
## Calculate the 10% trimmed mean of all insertions in the motif sites
motifSignal <- mean(mergedRawFootprintMetrics[,3], trim = 0.10)
## Calculate the mean of all insertions in the flank region
flankSignal <- mean(mergedRawFootprintMetrics[,2], trim = 0.10)
## Calculate the mean of background insertions
backgroundSignal <- mean(mergedRawFootprintMetrics[,1], trim = 0.10)
## Calculate flanking accessibility (log2 fold change between flank and background)
log2Flank <- log2(flankSignal / backgroundSignal)
## Calculate footprint depth (log2 fold change between flank and background)
log2Depth <- log2(motifSignal / flankSignal)
## Transfer the data to the temporary vectors
tempFlank[idxFlank] <- log2Flank
tempMotif[idxMotif] <- log2Depth
tempBackground[idxBackground] <- backgroundSignal
## Update vector indices
idxFlank <- (idxFlank + 1)
idxMotif <- (idxMotif + 1)
idxBackground <- (idxBackground + 1)
}, # end try
error=function(cond){
message(cond)
return(NA)
},
finally={})
} # end for (a in 1:numFiles)
## Count the total number of data points to plot (Total unique motifs)
numPoints <- length(tempBackground)
## Map the gene annotations from expression data using mygene database
mappings <- queryMany(geneList, scopes="entrezgene", fields="symbol", species="human")
genemaps <- mappings@listData[["symbol"]]
idx <- which(genemaps %in% geneNames)
##
addme <- c()
for (m in 1:numPoints){
f <- which(genemaps %in% geneNames[m])
if (length(f)==0){
addme[m] <- 0
} else {
addme[m] <- expData[[f]]
}}
##
x <- msviper(expData, regulonData)
nex <- x[["es"]][["nes"]]
nexname <- names(nex)
nexmappings <- queryMany(nexname, scopes="entrezgene", fields="symbol", species="human")
nexgenemaps <- nexmappings@listData[["symbol"]]
idx <- which(nexgenemaps %in% geneNames)
## Collect the viper values
addmex <- c()
for (m in 1:numPoints){
f <- which(nexgenemaps %in% geneNames[m])
if (length(f)==0){
addmex[m] <- -10
} else {
addmex[m] <- nex[[f]]
}}
## Transfer data to data frame
dfFootprints <- data.frame(flank = tempFlank, depth = tempMotif, background = tempBackground, geneName = geneNames[1:numFiles], exp = addme, nex = addmex)
return(dfFootprints)
} # end plotFPs <- function(fileList, geneNames, expData, regulonData)
##
df <- plotFPs(
fileList = fileList,
geneNames = geneNames,
expData = expData,
regulonData = regul)
## Generate the plots
ggplot(df, aes(depth, flank, color=exp)) +
geom_point() +
scale_color_gradient(low="blue", high="red")
##
ggplot(df, aes(depth, flank, color=nex)) +
geom_point() +
scale_color_gradient(low="blue", high="red")
load("C:/Users/Jordan/Desktop/H508-WT-01.CDX2.parsedFootprintData.Rdata")
View(footprintData)
View(footprintData)
